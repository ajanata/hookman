;    HookMan - System Hook Manager for TI-83+ Series.
;    Copyright (C) 2007  Andy Janata
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License along
;    with this program; if not, write to the Free Software Foundation, Inc.,
;    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
;
;	 You can contact the author via electronic mail at <ajanata@gmail.com>,
;	 or by writing to Andy Janata, 178 E. 5th St., Brewster, OH 44613 USA.
;
;
;	You should use Spencer's Assembler (spasm) to assemble this. It may or
;	may not work in other assemblers.
;	Wabbitsign is recommended to generate the .8xk file.


; TI-83+ Applications are run in the second memory bank, from $4000 to $7FFF.
.org $4000
; The 128-byte header required of all applications. Contains name and version
; information.
#include "header.inc"
; The standard include file, modified slightly for use with this assembler.
#include "ti83plus.inc"


start:
	; put initialization stuff here
	ld hl,AV_HMConfig
	rst 20h		; rMOV9TOOP1
	bcall(_ChkFindSym)
	jr nc,start2
	; config appvar not found - show license and make it
	; possibly show brief description as well
	call aboutLicense
	
	; check to make sure we have enough memory for the appvar
	ld hl,25			; I think this is right
	bcall(_EnoughMem)
	jr nc,+_
	
	; crap, not enough RAM.
	ld hl,errLowMem
	call PutS
	bcall(_GetKey)
	jp exit
	
	
_:	; now make the appvar
	ld hl,AV_HMConfig
	rst 20h			; rMOV9TOOP1
	ld hl,8			; config appvar is currently 8 bytes of data
	bcall(_CreateAppVar)
	ld hl,Sig_HMConfig
	inc de
	inc de			; get past size bytes
	ldi
	ldi
	ldi				; 5 bytes of signature
	ldi
	ldi
	xor a
	ld (de),a		; 3 bytes of managed hooks - default to none
	inc de
	ld (de),a
	inc de
	ld (de),a
	ld hl,AV_HMConfig
	rst 20h			; rMOV9TOOP1
	call SafeArc
	
	
	
	; config appvar exists
start2:
	
	
mainMenu:
	bcall(_ClrLCDFull)
	set textInverse,(iy+textFlags)
	ld hl,$0000
	ld (curRow),hl
	ld hl,titleHookman
	call PutS
	res textInverse,(iy+textFlags)
	
	ld hl,$0905
	ld (penCol),hl		; sets both penCol and penRow at the same time
	ld hl,menuNumbers+(3*1)
	call VPutS
	ld hl,$1005
	ld (penCol),hl
	ld hl,menuNumbers+(3*2)
	call VPutS
	ld hl,$1705
	ld (penCol),hl
	ld hl,menuNumbers+(3*3)
	call VPutS
	ld hl,$1E05
	ld (penCol),hl
	ld hl,menuNumbers+(3*4)
	call VPutS
	ld hl,$2505
	ld (penCol),hl
	ld hl,menuNumbers+(3*5)
	call VPutS

	; put the text after the numbers
	ld hl,$0910
	ld (penCol),hl
	ld hl,itemInstall
	call VPutS
	ld hl,$1010
	ld (penCol),hl
	ld hl,itemAdvanced
	call VPutS
	ld hl,$1710
	ld (penCol),hl
	ld hl,itemHelp
	call VPutS
	ld hl,$1E10
	ld (penCol),hl
	ld hl,itemAbout
	call VPutS
	ld hl,$2510
	ld (penCol),hl
	ld hl,itemExit
	call VPutS
	
	; copyright string
	ld hl,$3900
	ld (penCol),hl
	ld hl,txtCopyright
	call VPutSC


	; key input loop
	; kclear, kquit, k0-k4
_:
	bcall(_GetKey)
	
	; XXX DEBUG
	;cp kEnter
	;jr nz,mmNoDebug
	;di
	;halt

mmNoDebug:
	cp kClear
	jr z,exit
	cp kQuit
	jr z,exit
	sub k1
	jr z,InstallUninstall
	dec a
	jr z,advancedMenu
	dec a
	jr z,helpMenu
	dec a
	jp z,About
	dec a
	jr z,exit
	jp -_


InstallUninstall:
	bcall(_ClrLCDFull)
	ld a,2
	call installHook
	ld hl,$0000
	ld (curRow),hl
	ld hl,+_
	call PutS
	bcall(_GetKey)
	jp mainMenu
	
_:	.db "Rawkey hook installed.",0



advancedMenu:
helpMenu:
	; stub for keys for the time being
menuStub:
	bcall(_ClrLCDFull)
	ld hl,$0000
	ld (curRow),hl
	ld hl,asdf
	call PutS
	bcall(_GetKey)
	jp mainMenu

asdf: .db "Not implemented",0

exit:
	bjump(_JForceCmdNoChar)


; Since these include executable code or data, they cannot be included at the start of
; the app, otherwise the code in them would be executed when the app is started!

; General subroutines (ie, string printing, variable management, etc.).
#include "routines.z80"

; Our implementation of every hook.
#include "hooks.z80"

; About menu
#include "about.z80"

; Routines to manipulate configuration appvar.
#include "configappvar.z80"

; Constant data (user interface strings, variable names, etc.).
#include "strings.inc"

; Hook information database.
#include "hooklist.inc"


; various equates needed...
_OffPageJump		.equ	$44F2
	
