;    HookMan - System Hook Manager for TI-83+ Series.
;    Copyright (C) 2007  Andy Janata
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License along
;    with this program; if not, write to the Free Software Foundation, Inc.,
;    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
;
;	 You can contact the author via electronic mail at <ajanata@gmail.com>,
;	 or by writing to Andy Janata, 178 E. 5th St., Brewster, OH 44613 USA.


;	PutS: Prints a null-terminated string to the home screen in the large font
;	at cursor coordinates (curRow, curCol).
;	IN: (hl): pointer to null-terminated string. $D6 inserts a newline.
;		 (curRow): line to print string
;		 (curCol): column to start printing string
;	OUT: (hl): byte after the null
;	DESTROYS: a
_:
	bcall(_NewLine)
PutS:
	ld a,(hl)
	inc hl
	or a
	ret z
	cp $D6
	jr z,-_
	bcall(_PutC)
	jr PutS
	

;	VPutS: Prints a null-terminated string in the small font at (penRow, penCol).
;	IN: (hl): pointer to null-terminated string. No newline facilities.
;		 (penRow)
;	 	 (penCol)
;	OUT: (hl): byte after null
;	DESTROYS: a, de, ix
VPutS:
	ld a,(hl)
	inc hl
	or a
	ret z
	push hl
	bcall(_VPutMap)
	pop hl
	jr VPutS


;	VPutSC: Same as VPutS but allows a string to be "compressed" by introducing a
;		backspace character ($FF). VPutS is a few ticks faster, so should be used
;		when this isn't needed.
;	IN/OUT/DESTROYS: See VPutS.
_:
	ld a,(penCol)
	dec a
	ld (penCol),a
VPutSC:
	ld a,(hl)
	inc hl
	or a
	ret z
	cp $FF
	jr z,-_
	push hl
	bcall(_VPutMap)
	pop hl
	jr VPutSC
	

;	Menu: Displays a menu on the screen defined by an information block. Handles kQuit
;	by jumping to exit; kClear is returned as k[n+1] (which is always displayed as Back).
;	IN: (hl): pointer to a menu information block (see below)
;	OUT: a: menu item number selected [1, menuitems+1]
;	DESTROYS: everything
;
;	Menu information block format:
;	17 bytes: header (displayed in inverted large font at top of screen), null-terminated
;			(does not strictly have to be 17 bytes, but will not be a full black bar without)
;	1 byte: number of defined menu items (last item (back) is not included)
;	n null-terminated strings: menu itmes
Menu:
	push hl			; menu_block ret_addr
	bcall(_ClrLCDFull)
	ld hl,$0000
	ld (curRow),hl
	ld hl,$0905
	ld (penCol),hl
	pop hl			; ret_addr
	set textInverse,(iy+textFlags)
	call PutS
	res textInverse,(iy+textFlags)
	ld b,(hl)
	push bc			; item_count ret_addr
	inc hl
	ld de,menuNumbers+3
_:
	ex de,hl	; de: place in menu block    hl: menu number
	
	push de
	call VPutS
	pop de
	
	ex de,hl	; de: menu number    hl: place in menu block
	
	ld a,(penCol)
	add a,4
	ld (penCol),a
	
	push de
	call VPutS	; put the menu item string
	pop de
	
	ld a,5		; reset cursor for next menu item
	ld (penCol),a
	ld a,(penRow)
	add a,7
	ld (penRow),a
	djnz -_			; loop to show all of the menu items
	
	ex de,hl
	;ld hl,menuNumbers	; now the back item
	call VPutS
	ld a,(penCol)	; this can be replaced with a static number later
	add a,4
	ld (penCol),a
	ld hl,itemBack
	call VPutS
	
	; ok, now the menu is on the screen
	pop bc			; ret_addr       item count into b
	inc b			; we have b+1 items (back isn't included in count)
_:
	bcall(_GetKey)
	cp kQuit
	jp z,exit
	cp kClear
	jr nz,+_
	ld a,b			; make kClear be whatever number back is
	add a,k0
_:
	sub k1			; trickery to not have to mess around later
	cp b
	jr nc,--_		; loop for more keys
	inc a
	ret				; a contains the number of the menu item
	
	
;	SafeArc: Checks battery level before archiving a variable.
;		Assumes variable is not already in archive!
;	INPUTS: OP1: variable type + name
;	OUTPUTS: Z if batteries too low to archive
;	DESTROYS: all, OP3
SafeArc:
	bcall(_Chk_Batt_Low)
	ret z
	ld hl,+_
	call APP_PUSH_ERRORH
	bcall(_Arc_Unarc)
	call APP_POP_ERRORH
_:							; dummy error handler
	ret
	
	
;	BHL_plus_DE: Adds de to address b:hl, wrapping pages if needed.
;	IN: b:hl: page:addr address to add to
;		de: offset to add
;		0,(ix+0): If set, just adds de to hl
;	OUT: b:hl: page:addr address as result of addition, with page wrapping if required
;	DESTROYS: none
BHL_plus_DE:
	bit 0,(ix+0)
	jr z, +_
	add hl,de
	ret
_:
BHL_plus_DE_force:
	add hl,de
_:	bit 7,h			; this code to wrap around pages is common to these three routines
	ret z
	
	inc b
	res 7,h
	set 6,h
	ret


;	LoadCIndPaged_inc: Reads byte at b:hl from flash into c and increments b:hl,
;		wrapping pages if needed
;	IN: b:hl: Byte to read
;	OUT: c: Byte read
;	DESTROYS: none
LoadCIndPaged_inc:
	bcall(_LoadCIndPaged)
	inc hl
	jr -_
	

;	LoadDEIndPaged_inc: Reads word at b:hl from flash into de and increments b:hl,
;		wrapping pages if needed
;	IN: b:hl: Word to read
;	OUT: de: Word read
;	DESTROYS: none	
LoadDEIndPaged_inc:
	bcall(_LoadDEIndPaged)
	inc hl
	jr -_
	
	
;	CheckSig: checks the signature of an appvar.
;	IN: de: pointer to appvar header
;		hl: pointer to known signature
;	OUT: zero: bad sig
;	DESTROYS: a, de, hl
CheckSig:
	; 1
	ld a,(de)
	cp (hl)
	jr nz,+_
	inc de
	inc hl
	
	; 2
	ld a,(de)
	cp (hl)
	jr nz,+_
	inc de
	inc hl
	
	; 3
	ld a,(de)
	cp (hl)
	jr nz,+_
	inc de
	inc hl
	
	; 4
	ld a,(de)
	cp (hl)
	jr nz,+_
	inc de
	inc hl
	
	; 5
	ld a,(de)
	cp (hl)
	jr z,++_

_:
	; bad signature
	xor a
	ret
	
_:
	; good signature
	xor a
	inc a
	ret
	
	
;	LdHLInd: Loads the word at (hl) into hl. Equivalent to _LdHLInd.
;	IN: hl: address of word
;	OUT: hl: word at old value of hl
;	DESTROYS: none
LdHLInd:
	push af
	ld a,(hl)
	inc hl
	ld h,(hl)
	ld l,a
	pop af
	ret

;	GetHookName: Takes the hook number given in a and puts the name of the hook in OP3 (null-terminated).
;		May extend into OP4 depending on the hook.
;	IN: a: hook number
;	OUT: OP3: null-terminated hook name string
;	DESTROYS: de, hl
GetHookName:
	add a,a			; double to get offset into LUT
	ld hl,HookInfoLUT
	ld e,a
	ld d,0
	add hl,de
	call LdHLInd
	; hl points to start of the hook's info block
	; add 5 to skip over the other information to get to the name
	ld de,5
	add hl,de
	ld de,OP3
_:
	ld a,(hl)
	ld (de),a
	or a
	ret z				; <-- exit point. you will hit the null terminator sooner or later
	inc hl
	inc de
	jr -_



; equates for the string lists
listOffsets		.equ	appBackUpScreen+400
listStrings		.equ	appBackUpScreen



;	InitNameList: Clears the offsets list so GetHookNameAndPutInList functions properly.
;	IN: None
;	OUT: listOffsets's first MAX_HOOK+1 bytes are set to 0.
;	DESTROYS: none
InitNameList:
	push af
	push bc
	push hl
	xor a
	ld b,MAX_HOOK+1
	ld hl,listOffsets
_:
	ld (hl),a
	inc hl
	djnz -_
	ld (listStrings),a
	inc a					; the first offset has to be 1 for stuff to want to work right
	ld (listOffsets),a
	pop hl
	pop bc
	pop af
	ret

;	GetHookNameAndPutInList: Gets the name of the hook specified and adds it to a list of hook names.
;		There are two lists stored: One of offsets (one byte per hook in list) and one of names
;		(variable length per hook). The offsets list is stored at listOffsets, and the strings at
;		listStrings. CALL InitNameList BEFORE THE FIRST CALL TO THIS ROUTINE!
;	IN: a: hook to add to list
;	OUT: hook name added to list; a=0
;	DESTROYS: a
GetHookNameAndPutInList:
	di
	push hl
	push de
	push bc
	call GetHookName
	ld hl,listOffsets
_:
	ld a,(hl)
	inc hl
	or a
	jr nz,-_
	dec hl
	dec hl
	; I think this ld a is not needed
	ld a,(hl)			; offset of the last string in the list
	push hl				; [offset ptr] [ret]
	ld hl,listStrings
	ld e,a
	ld d,0
	add hl,de
	inc hl
	; now hl points to where to put the string
	ld de,OP3
_:
	ld a,(de)
	ld (hl),a
	inc hl
	inc de
	or a
	jr nz,-_
	; string is put in the list
	ld de,listStrings
	scf
	ccf
	sbc hl,de
	ld a,l
	pop hl
	inc hl
	ld (hl),a
	
	pop bc
	pop de
	pop hl
	xor a
	ei
	ret	
	
	

;	DisplayScrollList: Shows a header and a scroll list of strings (set up using GetHookNameAndPutInList).
;	IN: hl: Header
;		listOffsets: null-terminated list of offsets in listStrings of strings
;	OUT: none
;	DESTROYS:
DisplayScrollList:
	push hl
	ld hl,0
	ld (penCol),hl
	pop hl
	call VPutS
	
	; we can get 9 lines of text that we are scrolling on the screen at once
	
	ld hl,listOffsets
	ld b,0
_:
	ld a,(hl)
	or a
	jr z,+_
	inc b			; count of items
	inc hl
	jr -_
_:
	dec b			; it counts one too many due to the way it is set up
	ld c,0			; scroll position
	xor a
	ld (hl),a		; the last offset is a junk one, so write over it

dslLoop:
	ld hl,$0001
	ld (curRow),hl
	push bc
	ld b,7*16
	ld a,' '
_:
	bcall(_PutC)	; clear all but top line of screen
	djnz -_
	pop bc
	
	ld hl,$0700
	ld (penCol),hl
	ld hl,listOffsets
	ld d,0
	ld e,c
	add hl,de		; get to offset of the next string
	ld e,(hl)		; e = offset of next string, d still = 0
	push hl
	pop ix
	ld hl,listStrings
	add hl,de
	; hl points to the string, ix points to the offset (for checking end of list)
	; b is count of items in list, c is scroll position
	; use d for how many items we have shown so far
	ld d,0
_:
	push de
	push ix
	inc hl
	call VPutS
	pop ix
	pop de
	ld a,(penRow)
	add a,6
	ld (penRow),a
	xor a
	ld (penCol),a
	inc d
	ld a,d
	cp 9
	jr nc,+_
	add a,c
	sub b
	jr c,-_
_:
	; show scroll arrows and process keys
	ld a,c
	or a
	jr z,+_
	; show up scroll arrow
	ld hl,$0F01
	ld (curRow),hl
	ld a,$1E			; up arrow
	bcall(_PutC)
_:
	ld a,c
	add a,d
	cp b
	jp nc,dslKeyLoop
	; show down scroll arrow
	ld hl,$0F07
	ld (curRow),hl
	ld a,$1F			; down arrow
	bcall(_PutC)
dslKeyLoop:
	push de
	bcall(_GetKey)
	pop de
	cp kClear
	ret z
	cp kEnter
	ret z
	
	cp kUp
	jr nz,+_
	; up was pressed, check to make sure we CAN scroll up
	ld a,c
	or a
	jr z,dslKeyLoop
	; we can so do so
	dec c
	jr dslLoop
	
_:
	cp kDown
	jr nz,dslKeyLoop
	; down was pressed, check to make sure we CAN scroll down
	ld a,c
	add a,d
	cp b
	jr nc,dslKeyLoop
	; we can so do so
	inc c
	jp dslLoop

	
;	StrCmp: Compares string (hl) to string (de) for a maximum of bc bytes.
;	IN: hl and de: Strings to compare
;		bc: Maximum bytes to compare
;	OUT: zero: strings match
;	DESTROYS: All
StrCmp:
	ld a,(de)
	inc de
	cpi
	ret nz			; different bytes
	ret po			; BC has expired
	jr StrCmp




