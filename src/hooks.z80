;    HookMan - System Hook Manager for TI-83+ Series.
;    Copyright (C) 2007  Andy Janata
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License along
;    with this program; if not, write to the Free Software Foundation, Inc.,
;    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
;
;	 You can contact the author via electronic mail at <ajanata@gmail.com>,
;	 or by writing to Andy Janata, 178 E. 5th St., Brewster, OH 44613 USA.


;	This file contains HookMan's implementaion of every hook. These are just
;	stubs which stick a number into b (after pushing bc to the stack) and jump
;	to a unified hook handler.
;	Also contains utility routines to (un)install hooks.

;	Every hook must start with a $83 byte. This is used to verify the address
;	of the hook is valid. It is not executed. ($83 is "add a,e", in case you
;	were wondering.)


; Each hook is 1+1+2+3=7 bytes

;9B78 - Link Activity Hook
hookCode:
hookLinkActivity:
	.db $83
	push bc
	ld b,LinkActivityHook
	jp doHook

;9B7C - Cursor Hook
hookCursor:
	.db $83
	push bc
	ld b,CursorHook
	jp doHook
	
;9B84 - Raw Key Hook
hookRawKey:
	.db $83
	push bc
	ld b,RawKeyHook
	jp doHook
	
;9B88 - GetCSC Hook
hookGetCSC:
	.db $83
	push bc
	ld b,GetCSCHook
	jp doHook
	
;9B8C - Homescreen Hook
hookHomescreen:
	.db $83
	push bc
	ld b,HomescreenHook
	jp doHook
	
;9B90 - Window Hook
hookWindow:
	.db $83
	push bc
	ld b,WindowHook
	jp doHook
	
;9B94 - Graph Hook
hookGraph:
	.db $83
	push bc
	ld b,GraphHook
	jp doHook
	
;9B98 - Y= Hook
hookYEqu:
	.db $83
	push bc
	ld b,YEquHook
	jp doHook
	
;9B9C - Font Hook
hookFont:
	.db $83
	push bc
	ld b,FontHook
	jp doHook
	
;9BA0 - Regraph Hook
hookRegraph:
	.db $83
	push bc
	ld b,RegraphHook
	jp doHook
	
;9BA4 - Graphics Hook
hookGraphics:
	.db $83
	push bc
	ld b,GraphicsHook
	jp doHook
	
;9BA8 - Trace Hook
hookTrace:
	.db $83
	push bc
	ld b,TraceHook
	jp doHook
	
;9BAC - Parser Hook
hookParser:
	.db $83
	push bc
	ld b,ParserHook
	jp doHook
	
;9BB0 - App Change Hook
hookAppChange:
	.db $83
	push bc
	ld b,AppChangeHook
	jp doHook
	
;9BB4 - Catalog 1 Hook
hookCatalog1:
	.db $83
	push bc
	ld b,Catalog1Hook
	jp doHook
	
;9BB8 - Help Hook
hookHelp:
	.db $83
	push bc
	ld b,HelpHook
	jp doHook
	
;9BBC - cxRedisp Hook
hookcxRedisp:
	.db $83
	push bc
	ld b,cxRedispHook
	jp doHook
	
;9BC0 - Menu Hook
hookMenu:
	.db $83
	push bc
	ld b,MenuHook
	jp doHook
	
;9BC4 - Catalog 2 Hook
hookCatalog2:
	.db $83
	push bc
	ld b,Catalog2Hook
	jp doHook
	
;9BC8 - Token Hook
hookToken:
	.db $83
	push bc
	ld b,TokenHook
	jp doHook
	
;9BCC - Localize Hook
hookLocalize:
	.db $83
	push bc
	ld b,LocalizeHook
	jp doHook
	
;9BD0 - Silent Link Hook
hookSilentLink:
	.db $83
	push bc
	ld b,SilentLinkHook
	jp doHook
	
;9BD4 - USB Activity Hook
hookUSBActivity:
	.db $83
	push bc
	ld b,USBActivityHook
	jp doHook
	


;	Actually process the hook.
;	IN: b: Hook identification number (see defines in hooklist.inc).
;	   top of stack: Old bc to pass to the real hook.
doHook:
	; this dummy hook will not work for all of the different hooks!
	pop bc
	ret
	
	
;	Install the given hook number. Assumes that any current hook has
;	been saved if needed and also that there are hooks in the chain
;	that belong to this hook.
;	IN: a: Hook number to install.
;	OUT: hook is installed and enabled
;	DESTROYS: everything
installHook:
	di				; so the old hook can't be run, if it's already active
	ld hl,HookInfoLUT
	ld de,hookCode
	or a			; we need to skip our loop entirely for hook 0
	jp z,++_
	ld b,a
_:
	inc hl			; the LUT has 2-byte entries
	inc hl
	inc de			; each hook's code is 7 bytes
	inc de			; 2
	inc de
	inc de			; 4
	inc de
	inc de			; 6
	inc de
	djnz -_
__:
	; now hl points to the entry in the LUT and de points to the code for that hook
	bcall(_LdHLInd)
	; now hl points to the actual information block for the hook
	inc hl
	push hl
	bcall(_LdHLInd)		; yay pointer to a pointer!
	; and now, finally, hl points to the hook block in RAM
	; de still points to the address of our hook handler
	ld (hl),e
	inc hl
	ld (hl),d
	in a,(6)		; our page
	inc hl
	ld (hl),a		; now the hook ram block is set up right
	pop hl			; hl points to the ram block address in the hook info block now
	inc hl			; move past ram block address
	inc hl
	ld b,0
	ld c,(hl)		; bc now has the flags offset
	ex de,hl		; de points to flag offset byte in hook info block, hl is junk
	ld hl,flags
	add hl,bc		; hl points to the flag byte
	inc de			; de points to bitmask for hook enable flag
	ld a,(de)		; load the bitmask into a
	or (hl)			; set the bit for this hook
	ld (hl),a		; store it back to the flag byte
	; ... and I think we're done
	ei
	ret





; Routines for getting hook chain stuff:
;	ChainInit - chain number - finds chain, sets up pointers
;	ChainNext - pulls next node into ram
;	ChainVerify - makes sure next node is still a valid hook
;	ChainGetRelatives - scan hook chain list for relatives of the next hook to call (ie, hooks from same app)
;					and put them into the hook blocks. also stores THIS hook into its block
;	ChainRestoreHooks - restore hooks that were needed for relatives
;
;	ChainFetchByte - fetch byte from HMChains into a spot in ram. currenly a wrapper for LoadCIndPaged_inc
;				also checks the "is HMChains archived" bit and just copies the data if it isn't
;	ChainFetchWord - fetch word ....

workram	.equ symTable+1		; change if needed - for current chain node, and backing up stuff, and pointers
; layout:
; byte 0: flags
;		bit 0: 1 if HMChains isn't archived
; byte 1: page of next byte in HMChains
; bytes 2-3: address of next byte in HMChains


AV_HMChains:
	.db AppVarObj, "HMChains"
Sig_HMChains:
	.db "HMCL",0			; this is not a null-terminator: it is a version byte


;	ChainInit: Initializes pointers for walking the hook chain
;	IN: a: hook number
;	OUT: pointers initialized
;		carry flag: set if HMChains appvar not found, cannot do hook chains
;	DESTROYS: fixme, probably everything
ChainInit:
	push ix				; [ix] [ret addr]
	ld ix,workram
	ld hl,AV_HMChains
	rst 20h				; rMOV9TOOP1
	bcall(_ChkFindSym)
	ret c				; not found
	push af				; [hook number] [ix] [ret addr]
	ld a,b
	or a
	jr nz,+_
	; it isn't archived... that should not happen
	; oh well, guess we deal with it
	set 0,(ix+0)
	inc de
	inc de				; get past size bytes
	jr ++_
_:
	; it's in archive, yay, happy fun time
	res 0,(ix+0)
	ex de, hl			; I *think* not doing first ex de,hl, and putting 18 into hl, may work
	ld de,18			; skip over data valid flag, data length, symbol entry copy,
	call BHL_plus_DE	; name length, type byte, and name, to point to data
	ex de,hl	
_:	
	; now check the signature to make sure it's a valid chain
	ex de,hl
	ld de,Sig_HMChains
	push bc
	
	; I have a feeling I'll need completely different code 
	
	;	there aren't enough registers to do this in a loop
	; 1
	call ChainFetchByte
	ld a,(de)
	inc de
	cp c
	jr nz,+_
	; 2
	call ChainFetchByte
	ld a,(de)
	inc de
	cp c
	jr nz,+_
	; 3
	call ChainFetchByte
	ld a,(de)
	inc de
	cp c
	jr nz,+_
	; 4
	call ChainFetchByte
	ld a,(de)
	inc de
	cp c
	jr nz,+_
	; 5
	call ChainFetchByte
	ld a,(de)
	cp c					; in the future, we will have to support older versions of chain lists
	jr z,++_				; but there is only one version for now
	
_:
	; the sig was bad, can't use it for a chain, bail out
	scf
	ret
	
_:
	; now b:hl points to the beginning of the offset table
	pop af				; [ix] [ret addr]
	push af				; [hook num] [ix] [ret addr]
	ld d,0
	ld e,a
	call BHL_plus_DE	; get offset into table for this hook
	bcall(_LoadCIndPaged)	; don't need b:hl incremented
	ld (ix+1),c			; ix+1 temporarily holds offset of head of chain
	pop bc				; b: hook num c: old f		[ix] [ret addr]
	ld a,MAX_HOOK
	sub b
	ld d,0
	ld e,a
	call BHL_plus_DE
	; b:hl now points to the first hook chain node
	ex de,hl			; h is still 0
	ld l,(ix+1)			; offset for head of chain
	push de				; [ptr in chain list] [ix] [ret addr]
	ld d,h
	ld e,l
	add hl,hl
	add hl,hl
	add hl,de
	pop de				; [ix] [ret addr]
	ex de,hl
	call BHL_plus_DE
	; and how b:hl should be the first hook in the chain!
	
	ld (ix+1),b
	ld (ix+2),l
	ld (ix+3),h
	
	; finally should be done >:l
	pop ix
	ret


;	ChainFetchByte: Reads a byte from b:hl into c. If HMChains is not archived (0,(ix+0) is set),
;		just copies byte from (hl) to c.
;	IN: b:hl: page:addr of byte to read
;		0,(ix+0): If 1, byte is read directly from (hl)
;	OUT: c: byte read
;		b:hl++, with page wrapping if needed
;	DESTROYS: none
ChainFetchByte:
	bit 0,(ix+0)
	jp z,LoadCIndPaged_inc		; just hand off execution to that routine
	; isn't archived, just move a byte
	ld c,(hl)
	inc hl
	ret


;	ChainFetchWord: Reads a word from b:hl into de. If HMChains is not archived (0,(ix+0) is set),
;		just copies word from (hl) to de.
;	IN: b:hl: page:addr of word to read
;		0,(ix+0): If 1, word is read directly from (hl)
;	OUT: de: word read
;		b:hl+=2, with page wrapping if needed
;	DESTROYS: none
ChainFetchWord:
	bit 0,(ix+0)
	jp z,LoadDEIndPaged_inc		; just let that do its thing
	; in RAM, just read from there
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ret




